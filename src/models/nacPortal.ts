/**
 * Mist APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  NacPortalAccessTypeEnum,
  nacPortalAccessTypeEnumSchema,
} from './nacPortalAccessTypeEnum';
import { NacPortalSso, nacPortalSsoSchema } from './nacPortalSso';
import {
  NacPortalTypeEnum,
  nacPortalTypeEnumSchema,
} from './nacPortalTypeEnum';

export interface NacPortal {
  accessType?: NacPortalAccessTypeEnum;
  /** background image */
  bgImageUrl?: string;
  /** in days */
  certExpireTime?: number;
  /** model, version, fingering, events (connecting, disconnect, roaming), which ap */
  enableTelemetry?: boolean;
  /** in days */
  expiryNotificationTime?: number;
  guestPortalConfig?: NacPortalSso;
  name?: string;
  /** phase 2 */
  notifyExpiry?: boolean;
  ssid?: string;
  sso?: NacPortalSso;
  templateUrl?: string;
  thumbnailUrl?: string;
  tos?: string;
  type?: NacPortalTypeEnum;
}

export const nacPortalSchema: Schema<NacPortal> = object({
  accessType: ['access_type', optional(nacPortalAccessTypeEnumSchema)],
  bgImageUrl: ['bg_image_url', optional(string())],
  certExpireTime: ['cert_expire_time', optional(number())],
  enableTelemetry: ['enable_telemetry', optional(boolean())],
  expiryNotificationTime: ['expiry_notification_time', optional(number())],
  guestPortalConfig: [
    'guest_portal_config',
    optional(lazy(() => nacPortalSsoSchema)),
  ],
  name: ['name', optional(string())],
  notifyExpiry: ['notify_expiry', optional(boolean())],
  ssid: ['ssid', optional(string())],
  sso: ['sso', optional(lazy(() => nacPortalSsoSchema))],
  templateUrl: ['template_url', optional(string())],
  thumbnailUrl: ['thumbnail_url', optional(string())],
  tos: ['tos', optional(string())],
  type: ['type', optional(nacPortalTypeEnumSchema)],
});

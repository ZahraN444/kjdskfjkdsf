/**
 * Mist APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { NacPortal, nacPortalSchema } from '../models/nacPortal';
import {
  NacPortalTemplate,
  nacPortalTemplateSchema,
} from '../models/nacPortalTemplate';
import {
  ResponseSsoFailureSearch,
  responseSsoFailureSearchSchema,
} from '../models/responseSsoFailureSearch';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ApiV1OrgsNacportals400Error } from '../errors/apiV1OrgsNacportals400Error';
import { ApiV1OrgsNacportals401Error } from '../errors/apiV1OrgsNacportals401Error';
import { ApiV1OrgsNacportals403Error } from '../errors/apiV1OrgsNacportals403Error';
import { ApiV1OrgsNacportals429Error } from '../errors/apiV1OrgsNacportals429Error';
import { ApiV1OrgsNacportalsFailures400Error } from '../errors/apiV1OrgsNacportalsFailures400Error';
import { ApiV1OrgsNacportalsFailures401Error } from '../errors/apiV1OrgsNacportalsFailures401Error';
import { ApiV1OrgsNacportalsFailures403Error } from '../errors/apiV1OrgsNacportalsFailures403Error';
import { ApiV1OrgsNacportalsFailures429Error } from '../errors/apiV1OrgsNacportalsFailures429Error';
import { ApiV1OrgsNacportalsPortalImage400Error } from '../errors/apiV1OrgsNacportalsPortalImage400Error';
import { ApiV1OrgsNacportalsPortalImage401Error } from '../errors/apiV1OrgsNacportalsPortalImage401Error';
import { ApiV1OrgsNacportalsPortalImage403Error } from '../errors/apiV1OrgsNacportalsPortalImage403Error';
import { ApiV1OrgsNacportalsPortalImage429Error } from '../errors/apiV1OrgsNacportalsPortalImage429Error';
import { ApiV1OrgsNacportalsPortalTemplate400Error } from '../errors/apiV1OrgsNacportalsPortalTemplate400Error';
import { ApiV1OrgsNacportalsPortalTemplate401Error } from '../errors/apiV1OrgsNacportalsPortalTemplate401Error';
import { ApiV1OrgsNacportalsPortalTemplate403Error } from '../errors/apiV1OrgsNacportalsPortalTemplate403Error';
import { ApiV1OrgsNacportalsPortalTemplate429Error } from '../errors/apiV1OrgsNacportalsPortalTemplate429Error';
import { ResponseHttp404Error } from '../errors/responseHttp404Error';

export class OrgsNACPortalsController extends BaseController {
  /**
   * List Org NAC Portals
   *
   * @param orgId
   * @param page   Example: 1
   * @param limit  Example: 100
   * @return Response from the API call
   */
  async listOrgNacPortals(
    orgId: string,
    page?: number,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacPortal[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      page: [page, optional(number())],
      limit: [limit, optional(number())],
    });
    req.query('page', mapped.page);
    req.query('limit', mapped.limit);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals`;
    req.throwOn(400, ApiV1OrgsNacportals400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportals401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNacportals403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportals429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(array(nacPortalSchema), requestOptions);
  }

  /**
   * Get Org NAC Portal
   *
   * @param orgId
   * @param nacportalId
   * @return Response from the API call
   */
  async getOrgNacPortal(
    orgId: string,
    nacportalId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacPortal>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nacportalId: [nacportalId, string()],
    });
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals/${mapped.nacportalId}`;
    req.throwOn(400, ApiV1OrgsNacportals400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportals401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNacportals403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportals429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(nacPortalSchema, requestOptions);
  }

  /**
   * Update Org NAC Portal
   *
   * @param orgId
   * @param nacportalId
   * @param body
   * @return Response from the API call
   */
  async updateOrgNacPortal(
    orgId: string,
    nacportalId: string,
    body?: NacPortal,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacPortal>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nacportalId: [nacportalId, string()],
      body: [body, optional(nacPortalSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals/${mapped.nacportalId}`;
    req.throwOn(400, ApiV1OrgsNacportals400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportals401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNacportals403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportals429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(nacPortalSchema, requestOptions);
  }

  /**
   * Create Org NAC Portal
   *
   * @param orgId
   * @param body
   * @return Response from the API call
   */
  async createOrgNacPortal(
    orgId: string,
    body?: NacPortal,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacPortal>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      body: [body, optional(nacPortalSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals`;
    req.throwOn(400, ApiV1OrgsNacportals400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportals401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNacportals403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportals429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(nacPortalSchema, requestOptions);
  }

  /**
   * Delete Org NAC Portal
   *
   * @param orgId
   * @param nacportalId
   * @return Response from the API call
   */
  async deleteOrgNacPortal(
    orgId: string,
    nacportalId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nacportalId: [nacportalId, string()],
    });
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals/${mapped.nacportalId}`;
    req.throwOn(400, ApiV1OrgsNacportals400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportals401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNacportals403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportals429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.call(requestOptions);
  }

  /**
   * Get List of Org NAC Portal SSO Latest Failures
   *
   * @param orgId
   * @param nacportalId
   * @param page         Example: 1
   * @param limit        Example: 100
   * @param start        start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified
   * @param end          end datetime, can be epoch or relative time like -1d, -2h; now if not specified
   * @param duration     duration like 7d, 2w
   * @return Response from the API call
   */
  async listOrgNacPortalSsoLatestFailures(
    orgId: string,
    nacportalId: string,
    page?: number,
    limit?: number,
    start?: number,
    end?: number,
    duration?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResponseSsoFailureSearch>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nacportalId: [nacportalId, string()],
      page: [page, optional(number())],
      limit: [limit, optional(number())],
      start: [start, optional(number())],
      end: [end, optional(number())],
      duration: [duration, optional(string())],
    });
    req.query('page', mapped.page);
    req.query('limit', mapped.limit);
    req.query('start', mapped.start);
    req.query('end', mapped.end);
    req.query('duration', mapped.duration);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals/${mapped.nacportalId}/failures`;
    req.throwOn(400, ApiV1OrgsNacportalsFailures400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportalsFailures401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNacportalsFailures403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportalsFailures429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(responseSsoFailureSearchSchema, requestOptions);
  }

  /**
   * Update Org NAC Portal Template
   *
   * @param orgId
   * @param nacportalId
   * @param body
   * @return Response from the API call
   */
  async updateOrgNacPortalTempalte(
    orgId: string,
    nacportalId: string,
    body?: NacPortalTemplate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nacportalId: [nacportalId, string()],
      body: [body, optional(nacPortalTemplateSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals/${mapped.nacportalId}/portal_template`;
    req.throwOn(400, ApiV1OrgsNacportalsPortalTemplate400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportalsPortalTemplate401Error, 'Unauthorized');
    req.throwOn(
      403,
      ApiV1OrgsNacportalsPortalTemplate403Error,
      'Permission Denied'
    );
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportalsPortalTemplate429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.call(requestOptions);
  }

  /**
   * Upload background image for NAC Portal
   *
   * @param orgId
   * @param nacportalId
   * @param file         Binary file
   * @param json         JSON string describing the upload
   * @return Response from the API call
   */
  async uploadOrgNacPortalImage(
    orgId: string,
    nacportalId: string,
    file?: FileWrapper,
    json?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nacportalId: [nacportalId, string()],
      json: [json, optional(string())],
    });
    req.formData({ file: file, json: mapped.json });
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals/${mapped.nacportalId}/portal_image`;
    req.throwOn(400, ApiV1OrgsNacportalsPortalImage400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportalsPortalImage401Error, 'Unauthorized');
    req.throwOn(
      403,
      ApiV1OrgsNacportalsPortalImage403Error,
      'Permission Denied'
    );
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportalsPortalImage429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.call(requestOptions);
  }

  /**
   * Delete background image for NAC Portal
   *
   *
   * If image is not uploaded or is deleted, NAC Portal will use default image.
   *
   * @param orgId
   * @param nacportalId
   * @return Response from the API call
   */
  async deleteOrgNacPortalImage(
    orgId: string,
    nacportalId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nacportalId: [nacportalId, string()],
    });
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nacportals/${mapped.nacportalId}/portal_image`;
    req.throwOn(400, ApiV1OrgsNacportalsPortalImage400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNacportalsPortalImage401Error, 'Unauthorized');
    req.throwOn(
      403,
      ApiV1OrgsNacportalsPortalImage403Error,
      'Permission Denied'
    );
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNacportalsPortalImage429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.call(requestOptions);
  }
}

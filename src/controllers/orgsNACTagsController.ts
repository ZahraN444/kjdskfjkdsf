/**
 * Mist APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { NacTag, nacTagSchema } from '../models/nacTag';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';
import { ApiV1OrgsNactags400Error } from '../errors/apiV1OrgsNactags400Error';
import { ApiV1OrgsNactags401Error } from '../errors/apiV1OrgsNactags401Error';
import { ApiV1OrgsNactags403Error } from '../errors/apiV1OrgsNactags403Error';
import { ApiV1OrgsNactags429Error } from '../errors/apiV1OrgsNactags429Error';
import { ResponseHttp404Error } from '../errors/responseHttp404Error';

export class OrgsNACTagsController extends BaseController {
  /**
   * Get Org NAC Tag
   *
   * @param orgId
   * @param nactagId
   * @return Response from the API call
   */
  async getOrgNacTag(
    orgId: string,
    nactagId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacTag>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nactagId: [nactagId, string()],
    });
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nactags/${mapped.nactagId}`;
    req.throwOn(400, ApiV1OrgsNactags400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNactags401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNactags403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNactags429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(nacTagSchema, requestOptions);
  }

  /**
   * Get List of Org NAC Tags
   *
   * @param orgId
   * @param type   Type of NAC Tag
   * @param name   Name of NAC Tag
   * @param match  Type of NAC Tag
   * @param page   Example: 1
   * @param limit  Example: 100
   * @return Response from the API call
   */
  async listOrgNacTags(
    orgId: string,
    type?: string,
    name?: string,
    match?: string,
    page?: number,
    limit?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacTag[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      type: [type, optional(string())],
      name: [name, optional(string())],
      match: [match, optional(string())],
      page: [page, optional(number())],
      limit: [limit, optional(number())],
    });
    req.query('type', mapped.type);
    req.query('name', mapped.name);
    req.query('match', mapped.match);
    req.query('page', mapped.page);
    req.query('limit', mapped.limit);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nactags`;
    req.throwOn(400, ApiV1OrgsNactags400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNactags401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNactags403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNactags429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(array(nacTagSchema), requestOptions);
  }

  /**
   * Delete Org NAC Tag
   *
   * @param orgId
   * @param nactagId
   * @return Response from the API call
   */
  async deleteOrgNacTag(
    orgId: string,
    nactagId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nactagId: [nactagId, string()],
    });
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nactags/${mapped.nactagId}`;
    req.throwOn(400, ApiV1OrgsNactags400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNactags401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNactags403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNactags429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.call(requestOptions);
  }

  /**
   * Update Org NAC Tag
   *
   * @param orgId
   * @param nactagId
   * @param body
   * @return Response from the API call
   */
  async updateOrgNacTag(
    orgId: string,
    nactagId: string,
    body?: NacTag,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacTag>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      nactagId: [nactagId, string()],
      body: [body, optional(nacTagSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nactags/${mapped.nactagId}`;
    req.throwOn(400, ApiV1OrgsNactags400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNactags401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNactags403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNactags429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(nacTagSchema, requestOptions);
  }

  /**
   * Create Org NAC Tag
   *
   * @param orgId
   * @param body
   * @return Response from the API call
   */
  async createOrgNacTag(
    orgId: string,
    body?: NacTag,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NacTag>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      orgId: [orgId, string()],
      body: [body, optional(nacTagSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/api/v1/orgs/${mapped.orgId}/nactags`;
    req.throwOn(400, ApiV1OrgsNactags400Error, 'Bad Syntax');
    req.throwOn(401, ApiV1OrgsNactags401Error, 'Unauthorized');
    req.throwOn(403, ApiV1OrgsNactags403Error, 'Permission Denied');
    req.throwOn(
      404,
      ResponseHttp404Error,
      'Not found. The API endpoint doesnâ€™t exist or resource doesnâ€™ t exist'
    );
    req.throwOn(
      429,
      ApiV1OrgsNactags429Error,
      'Too Many Request. The API Token used for the request reached the 5000 API Calls per hour threshold'
    );
    req.authenticate([
      { apiToken: true },
      { basicAuth: true },
      { basicAuth: true, csrfToken: true },
    ]);
    return req.callAsJson(nacTagSchema, requestOptions);
  }
}

/**
 * Mist APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  NacPortal,
  NacPortalAccessTypeEnum,
  OrgsNACPortalsController,
  ResponseSsoFailureSearch,
} from '../src';
import { testClient } from './testClient';
import {
  expectHeadersToMatch,
  expectMatchingWithOptions,
  makeApiCall,
} from './testHelper';

describe('OrgsNACPortalsController', () => {
  let controller : OrgsNACPortalsController;

  beforeAll(() => {
    controller = new OrgsNACPortalsController(testClient);
  });

  it('should Test listOrgNacPortals', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const page = 1;

    const limit = 100;

    const response = await makeApiCall(
      () => controller.listOrgNacPortals(orgId, page, limit)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: NacPortal[] = [
      {
        accessType: NacPortalAccessTypeEnum.Wireless,
        certExpireTime: 365,
        enableTelemetry: true,
        expiryNotificationTime: 2,
        name: 'get-wifi',
        notifyExpiry: true,
        ssid: 'Corp',
        sso: {
          idpCert: '-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----',
          idpSignAlgo: 'sha256',
          idpSsoUrl: 'https://yourorg.onelogin.com/trust/saml2/http-post/sso/138130',
          issuer: 'https://app.onelogin.com/saml/metadata/138130',
          nameidFormat: 'email',
          ssoRoleMatching: [
            {
              assigned: 'user',
              match: 'Student',
            }
          ],
          useSsoRoleForCert: true,
        },
      }
    ];

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test createOrgNacPortal', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const response = await makeApiCall(
      () => controller.createOrgNacPortal(orgId, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: NacPortal = {
      accessType: NacPortalAccessTypeEnum.Wireless,
      certExpireTime: 365,
      enableTelemetry: true,
      expiryNotificationTime: 2,
      name: 'get-wifi',
      notifyExpiry: true,
      ssid: 'Corp',
      sso: {
        idpCert: '-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----',
        idpSignAlgo: 'sha256',
        idpSsoUrl: 'https://yourorg.onelogin.com/trust/saml2/http-post/sso/138130',
        issuer: 'https://app.onelogin.com/saml/metadata/138130',
        nameidFormat: 'email',
        ssoRoleMatching: [
          {
            assigned: 'user',
            match: 'Student',
          }
        ],
        useSsoRoleForCert: true,
      },
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test deleteOrgNacPortal', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const nacportalId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const response = await makeApiCall(
      () => controller.deleteOrgNacPortal(orgId, nacportalId)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test getOrgNacPortal', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const nacportalId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const response = await makeApiCall(
      () => controller.getOrgNacPortal(orgId, nacportalId)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: NacPortal = {
      accessType: NacPortalAccessTypeEnum.Wireless,
      certExpireTime: 365,
      enableTelemetry: true,
      expiryNotificationTime: 2,
      name: 'get-wifi',
      notifyExpiry: true,
      ssid: 'Corp',
      sso: {
        idpCert: '-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----',
        idpSignAlgo: 'sha256',
        idpSsoUrl: 'https://yourorg.onelogin.com/trust/saml2/http-post/sso/138130',
        issuer: 'https://app.onelogin.com/saml/metadata/138130',
        nameidFormat: 'email',
        ssoRoleMatching: [
          {
            assigned: 'user',
            match: 'Student',
          }
        ],
        useSsoRoleForCert: true,
      },
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test updateOrgNacPortal', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const nacportalId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const response = await makeApiCall(
      () => controller.updateOrgNacPortal(orgId, nacportalId, undefined)
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: NacPortal = {
      accessType: NacPortalAccessTypeEnum.Wireless,
      certExpireTime: 365,
      enableTelemetry: true,
      expiryNotificationTime: 2,
      name: 'get-wifi',
      notifyExpiry: true,
      ssid: 'Corp',
      sso: {
        idpCert: '-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----',
        idpSignAlgo: 'sha256',
        idpSsoUrl: 'https://yourorg.onelogin.com/trust/saml2/http-post/sso/138130',
        issuer: 'https://app.onelogin.com/saml/metadata/138130',
        nameidFormat: 'email',
        ssoRoleMatching: [
          {
            assigned: 'user',
            match: 'Student',
          }
        ],
        useSsoRoleForCert: true,
      },
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test listOrgNacPortalSsoLatestFailures', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const nacportalId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const page = 1;

    const limit = 100;

    const duration = '1d';

    const response = await makeApiCall(
      () => controller.listOrgNacPortalSsoLatestFailures(
        orgId,
        nacportalId,
        page,
        limit,
        undefined,
        undefined,
        duration
      )
    );

    expect(response.statusCode).toBe(200);

    const expectedHeaders = { 'Content-Type': ['application/json', true] };

    expectHeadersToMatch(response.headers, expectedHeaders);

    const expected: ResponseSsoFailureSearch = {
      results: [
        {
          detail: 'string',
          samlAssertionXml: 'string',
          timestamp: 0,
        }
      ],
    };

    expect(response.result).not.toBeNull();
    expectMatchingWithOptions(
      expected,
      response.result,
      { allowExtra: true, isOrdered: false, checkValues: false }
    );
  });

  it('should Test deleteOrgNacPortalImage', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const nacportalId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const response = await makeApiCall(
      () => controller.deleteOrgNacPortalImage(orgId, nacportalId)
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test uploadOrgNacPortalImage', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const nacportalId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const response = await makeApiCall(
      () => controller.uploadOrgNacPortalImage(
        orgId,
        nacportalId,
        undefined,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);
  });

  it('should Test updateOrgNacPortalTempalte', async () => {
    const orgId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const nacportalId = '000000ab-00ab-00ab-00ab-0000000000ab';

    const response = await makeApiCall(
      () => controller.updateOrgNacPortalTempalte(
        orgId,
        nacportalId,
        undefined
      )
    );

    expect(response.statusCode).toBe(200);
  });
});
